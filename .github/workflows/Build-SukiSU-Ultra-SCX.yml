name: Build SukiSU Ultra SCX

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "ÂàÜÊîØÔºàSoCÂπ≥Âè∞Ôºâ"
        type: choice
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        description: "ÈÖçÁΩÆÊñá‰ª∂"
        type: choice
        required: true
        default: oneplus_ace3_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - GitHubÊúâbugÂèØËÉΩ‰∏çÊòæÁ§∫ÊúÄÂêé‰∏ÄÈ°π,ËØØ‰ΩøÁî®Ê≠§È°π
      CPUD:
        description: "Â§ÑÁêÜÂô®‰ª£Âè∑"
        type: choice
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        description: "ÂÜÖÊ†∏ÂÆâÂçìÁâàÊú¨"
        type: choice
        required: true
        default: android13
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
        description: "ÂÜÖÊ†∏ÁâàÊú¨"
        type: choice
        required: true
        default: "5.15"
        options:
          - "5.10"
          - "5.15"
          - "6.1"
          - "6.6"
      ZRAM:
        description: "ÊòØÂê¶ÂêØÁî®Êõ¥Â§öZRAMÁÆóÊ≥ïÔºàÊé®ËçêÂºÄÂêØÔºâ"
        type: boolean
        required: true
        default: true
      SCX:
        description: "ÊòØÂê¶ÂêØÁî®SCXË∞ÉÈÄüÂô®"
        type: boolean
        required: true
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G

    steps:
      - name: ÊúÄÂ§ßÂåñÊûÑÂª∫Á©∫Èó¥
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: ÂÆâË£ÖÁºñËØë‰æùËµñ
        run: |
          sudo apt-get update
          sudo apt-get install lld
          sudo apt-get install llvm
          sudo apt update
          sudo apt install -y python3 git curl ccache unzip libelf-dev lld llvm clang llvm-dev

      - name: Ê£ÄÂá∫‰ªìÂ∫ì
        uses: actions/checkout@v4

      - name: ‰∏ãËΩΩmanifestÂπ∂ÁîüÊàêccacheÂìàÂ∏å
        id: manifest_hash
        run: |
          mkdir -p kernel_workspace
          curl -LSs "https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/refs/heads/oneplus/${{ github.event.inputs.CPU }}/${{ github.event.inputs.FEIL }}.xml" \
            -o kernel_workspace/${{ github.event.inputs.FEIL }}.xml
          echo "hash=$(sha256sum kernel_workspace/${{ github.event.inputs.FEIL }}.xml | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: ÊÅ¢Â§çccacheÁºìÂ≠ò
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.event.inputs.CPU }}-${{ github.event.inputs.FEIL }}-${{ github.event.inputs.KERNEL_VERSION }}-${{ steps.manifest_hash.outputs.hash }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.event.inputs.CPU }}-

      - name: ÈÖçÁΩÆGit‰ø°ÊÅØ
        run: |
          git config --global user.name "FurLC"
          git config --global user.email "qq441791056@163.com"

      - name: ÂÆâË£ÖrepoÂ∑•ÂÖ∑
        run: |
          curl --retry 3 https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: ÂàùÂßãÂåñrepoÂπ∂ÂêåÊ≠•Ê∫êÁ†Å
        run: |
          set -e
          mkdir -p kernel_workspace
          cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b refs/heads/oneplus/${{ github.event.inputs.CPU }} \
            -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync --force-sync --no-tags --no-clone-bundle -j$(nproc)
          # Ê∏ÖÁêÜabiÂØºÂá∫Âíå-dirtyÊ†áËÆ∞
          rm kernel_platform/common/android/abi_gki_protected_exports_* || true
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || true
          for script in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' $script
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' $script
            sed -i '$s|echo "\$res"|echo "-FurLC"|' $script
          done

      - name: Ê≥®ÂÖ•KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: ËÆæÁΩÆsusfsÂπ∂Â∫îÁî®‰∏ªË°•‰∏Å
        run: |
          set -e
          cd kernel_workspace
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git \
            -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
          wget https://raw.githubusercontent.com/FurLC/Action_OnePlus_KernelSU_SUSFS/main/ogki2gki.patch
          wget https://raw.githubusercontent.com/FurLC/Action_OnePlus_KernelSU_SUSFS/main/ogki2gki_c99fix.patch

          cd kernel_platform
          PATCHDIR="../susfs4ksu/kernel_patches"
          SUKIPATCH="../SukiSU_patch"
          COMMON="./common"

          cp $PATCHDIR/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch $COMMON/ 2>/dev/null || true
          mkdir -p $COMMON/fs $COMMON/include/linux $COMMON/lib $COMMON/crypto
          cp $PATCHDIR/fs/* $COMMON/fs/ 2>/dev/null || true
          cp $PATCHDIR/include/linux/* $COMMON/include/linux/ 2>/dev/null || true
          if [[ "${{ github.event.inputs.ZRAM }}" == "true" ]]; then
            cp -r $SUKIPATCH/other/zram/lz4k/include/linux/* $COMMON/include/linux/ 2>/dev/null || true
            cp -r $SUKIPATCH/other/zram/lz4k/lib/* $COMMON/lib/ 2>/dev/null || true
            cp -r $SUKIPATCH/other/zram/lz4k/crypto/* $COMMON/crypto/ 2>/dev/null || true
            cp -r $SUKIPATCH/other/zram/lz4k_oplus $COMMON/lib/ 2>/dev/null || true
          fi
          cp ../ogki2gki.patch $COMMON/
          cp ../ogki2gki_c99fix.patch $COMMON/

          cd $COMMON
          SUSFS_PATCH="50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch"
          if [[ -f "$SUSFS_PATCH" ]]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$SUSFS_PATCH"
            sed -i '/#include <trace\/hooks\/fs.h>/d' "$SUSFS_PATCH"
            patch -p1 < "$SUSFS_PATCH" || true
          fi

          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch || true
          patch -p1 -F 3 < ogki2gki_c99fix.patch
          echo "‚úÖ SUSFS Âíå syscall_hooks patch Â∫îÁî®ÂÆåÊàê"

      - name: Â∫îÁî®zramÁõ∏ÂÖ≥Ë°•‰∏Å
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common

          PATCH_LIST=(
            "lz4kd"
            "lz4k_oplus"
          )
          PATCH_BASE=../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}

          for PATCH_NAME in "${PATCH_LIST[@]}"; do
            PATCH_FILE="$PATCH_BASE/$PATCH_NAME.patch"
            LOCAL_PATCH="./$PATCH_NAME.patch"
            if [[ -f "$PATCH_FILE" ]]; then
              echo "üü¢ Â∫îÁî®Ë°•‰∏Å: $PATCH_NAME"
              cp "$PATCH_FILE" "$LOCAL_PATCH"
              patch -p1 -F 3 < "$LOCAL_PATCH" || echo "‚ö†Ô∏è $PATCH_NAME patchÂ§±Ë¥•(Â∑≤Â∫îÁî®/ÂÜ≤Á™ÅÂèØÂøΩÁï•)"
            else
              echo "‚ùó Êú™ÊâæÂà∞$PATCH_NAMEË°•‰∏Å (kernel version ${{ github.event.inputs.KERNEL_VERSION }})"
            fi
          done

      - name: ‰∏ãËΩΩÂπ∂Â∫îÁî®SCXË°•‰∏Å
        if: ${{ github.event.inputs.SCX == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched

          # ‰øùËØÅKconfigÂ≠òÂú®ÔºàËã•Êó†ÂàôÊñ∞Âª∫Ôºâ
          [ -f Kconfig ] || touch Kconfig
          if ! grep -q SCHED_CLASS_EXT Kconfig; then
            echo "config SCHED_CLASS_EXT" >> Kconfig
            echo "    bool \"Enable SchedExt (HanKuCha SCX)\"" >> Kconfig
            echo "    default n" >> Kconfig
            echo "    help" >> Kconfig
            echo "      Enable the external SCX scheduler for advanced tuning." >> Kconfig
          fi

          # ‰øùËØÅ Makefile ËøΩÂä†
          grep -q hmbird_sched_proc_main.o Makefile || \
            echo 'obj-$(CONFIG_SCHED_CLASS_EXT) += hmbird_sched_proc_main.o slim_sysctl.o' >> Makefile

          # ‰øùËØÅ defconfig ËøΩÂä†
          DEFCONFIG=../../arch/arm64/configs/gki_defconfig
          grep -q CONFIG_SCHED_CLASS_EXT "$DEFCONFIG" || echo 'CONFIG_SCHED_CLASS_EXT=y' >> "$DEFCONFIG"

      - name: "[DEBUG] SCXÁõÆÂΩïÁªìÊûÑÂíå‰∏ªË¶ÅÊñá‰ª∂ÂÜÖÂÆπ"
        if: ${{ github.event.inputs.SCX == 'true' }}
        run: |
          echo "==== [DEBUG] kernel_workspace/kernel_platform/common/kernel/sched ÁõÆÂΩïÁªìÊûÑ ===="
          ls -l kernel_workspace/kernel_platform/common/kernel/sched || true
          echo "==== [DEBUG] KconfigÂÜÖÂÆπ ===="
          cat kernel_workspace/kernel_platform/common/kernel/sched/Kconfig || echo "Êó†Kconfig"
          echo "==== [DEBUG] MakefileÂÜÖÂÆπ ===="
          cat kernel_workspace/kernel_platform/common/kernel/sched/Makefile || echo "Êó†Makefile"
          echo "==== [DEBUG] defconfigÂÜÖÂÆπ ===="
          cat kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig || echo "Êó†defconfig"

      - name: ÂÜôÂÖ•SUSFS„ÄÅZRAMÂÜÖÊ†∏ÈÖçÁΩÆ
        run: |
          cd kernel_workspace/kernel_platform
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig

          echo "# SUSFS/KSUÂü∫Á°ÄÈÖçÁΩÆ" >> "$DEFCONFIG"
          echo "CONFIG_KSU=y" >> "$DEFCONFIG"
          echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG"

          if [[ "${{ github.event.inputs.ZRAM }}" == "true" ]]; then
            echo "# ÂêØÁî®ZRAMÂèä‰∏ªÊµÅÂéãÁº©ÁÆóÊ≥ïÊîØÊåÅ" >> "$DEFCONFIG"
            echo "CONFIG_ZSMALLOC=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_842=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$DEFCONFIG"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$DEFCONFIG"
          fi

          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: ÁºñËØëÂâçÂº∫Âà∂Ê≥®ÂÖ•SCXÂà∞ÊúÄÁªà .configÔºà‰ªÖ5.10/5.15ÔºåSCXÈÄâÈ°πÊâìÂºÄÊó∂ÔºåÂ∏¶Áº©ËøõÔºâ
        if: ${{ (github.event.inputs.KERNEL_VERSION == '5.10' || github.event.inputs.KERNEL_VERSION == '5.15') && github.event.inputs.SCX == 'true' }}
        shell: bash
        run: |
          target_file="kernel_workspace/kernel_platform/build/kernel/build.sh"
          if [[ ! -f "$target_file" ]]; then
            echo "‚ùå Êú™ÊâæÂà∞ build.sh: $target_file"
            exit 1
          fi
          if grep -q "SCX patch start" "$target_file"; then
            echo "Â∑≤patch: $target_file"
            exit 0
          fi
          sed -i '/echo " Building kernel"/i\# ==== SCX patch start ====' "$target_file"
          sed -i '/echo " Building kernel"/i\if [ -f "${OUT_DIR}/.config" ]; then' "$target_file"
          sed -i '/echo " Building kernel"/i\    grep -q "^CONFIG_SCHED_CLASS_EXT=y" "${OUT_DIR}/.config" || echo "CONFIG_SCHED_CLASS_EXT=y" >> "${OUT_DIR}/.config"' "$target_file"
          sed -i '/echo " Building kernel"/i\    (cd ${OUT_DIR} && make O=${OUT_DIR} olddefconfig)' "$target_file"
          sed -i '/echo " Building kernel"/i\fi' "$target_file"
          sed -i '/echo " Building kernel"/i\# ==== SCX patch end ====' "$target_file"
          echo "‚úÖ Â∑≤patch: $target_file"

      - name: "[DEBUG] ÁºñËØëÂâçÂÖ≥ÈîÆË∑ØÂæÑÂíåÈÖçÁΩÆÊ£ÄÊü•"
        run: |
          echo "==== [DEBUG] Êü•ÊâæÊâÄÊúâ .config Êñá‰ª∂ ===="
          find kernel_workspace -type f -name ".config" | tee all_config_paths.txt

          echo "==== [DEBUG] .config ‰∏ªË¶ÅÂÜÖÂÆπ ===="
          for cfile in $(cat all_config_paths.txt); do
            echo "---- $cfile ----"
            tail -n 20 "$cfile"
            grep CONFIG_SCHED_CLASS_EXT "$cfile" || echo "Ê≤°ÊúâSCHED_CLASS_EXT"
          done

          echo "==== [DEBUG] out ÁõÆÂΩïÁªìÊûÑÔºà3Â±ÇÔºâ ===="
          tree -L 3 kernel_workspace/kernel_platform/out || true

          echo "==== [DEBUG] ÂΩìÂâçbuild.sh patchÁâáÊÆµ ===="
          grep -A 10 "SCX patch start" kernel_workspace/kernel_platform/build/kernel/build.sh || true

      - name: ÁºñËØëÂÜÖÊ†∏
        run: |
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          sudo apt install libelf-dev
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig all
          

      - name: "[DEBUG] ÁºñËØëÂêéÊü•Êâæ .config„ÄÅSCXÂØπË±°Á≠â"
        run: |
          echo "==== [DEBUG] Êü•ÊâæÊâÄÊúâ .config Êñá‰ª∂ ===="
          find kernel_workspace -type f -name ".config" | tee all_config_paths.txt

          echo "==== [DEBUG] .config ‰∏ªË¶ÅÂÜÖÂÆπ ===="
          for cfile in $(cat all_config_paths.txt); do
            echo "---- $cfile ----"
            tail -n 20 "$cfile"
            grep CONFIG_SCHED_CLASS_EXT "$cfile" || echo "Ê≤°ÊúâSCHED_CLASS_EXT"
          done

          echo "==== [DEBUG] out ÁõÆÂΩïÁªìÊûÑÔºà3Â±ÇÔºâ ===="
          tree -L 3 kernel_workspace/kernel_platform/out || true

          echo "==== [DEBUG] SCXÂØπË±°Êñá‰ª∂ ===="
          find kernel_workspace/kernel_platform/out -name "hmbird_sched_proc_main.o" || echo "Êó†hmbird_sched_proc_main.o"
          find kernel_workspace/kernel_platform/out -name "slim_sysctl.o" || echo "Êó†slim_sysctl.o"

      - name: "[DEBUG] Ëá™Âä®Êü•ÊâæImageË∑ØÂæÑÁ≠â"
        id: image_path
        run: |
          IMAGE=$(find kernel_workspace/kernel_platform/out -type f -name "Image" | head -n 1)
          if [[ -z "$IMAGE" ]]; then
            echo "Êú™ÊâæÂà∞ Image Êñá‰ª∂ÔºåÊûÑÂª∫ÂèØËÉΩÂ§±Ë¥•"
            exit 1
          fi
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
          CONFIG=$(find "$(dirname "$IMAGE")" -maxdepth 2 -name ".config" | head -n 1)
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG=$CONFIG" >> $GITHUB_OUTPUT
          OUTROOT=$(echo "$IMAGE" | sed 's|/gki_kernel/.*||')
          echo "OUTROOT=$OUTROOT" >> $GITHUB_ENV
          echo "OUTROOT=$OUTROOT" >> $GITHUB_OUTPUT

      - name: "[DEBUG] ÁºñËØëÂêéÊ£ÄÊü•SCXÂØπË±°Êñá‰ª∂‰∏éÁ¨¶Âè∑"
        if: ${{ github.event.inputs.SCX == 'true' }}
        run: |
          echo "==== [DEBUG] Êü•Êâæhmbird_sched_proc_main.o ===="
          find "${{ env.OUTROOT }}" -name "hmbird_sched_proc_main.o" || echo "Êó†hmbird_sched_proc_main.o"
          echo "==== [DEBUG] Êü•Êâæslim_sysctl.o ===="
          find "${{ env.OUTROOT }}" -name "slim_sysctl.o" || echo "Êó†slim_sysctl.o"
          echo "==== [DEBUG] Êü•ÊâæImageÊñá‰ª∂ ===="
          echo "${{ env.IMAGE }}"

      - name: "[DEBUG] ÁºñËØëÂêé.configÊ£ÄÊü•SCXÈÖçÁΩÆ"
        if: ${{ github.event.inputs.SCX == 'true' }}
        run: |
          echo "==== [DEBUG] ÁºñËØëÂêé .config Ê£ÄÊü•SCXÈÖçÁΩÆ ===="
          grep CONFIG_SCHED_CLASS_EXT "${{ env.CONFIG }}" || echo "Êó†CONFIG_SCHED_CLASS_EXT"

      - name: "[DEBUG] ImageÊñá‰ª∂‰∏≠Êü•ÊâæSCXÁ¨¶Âè∑ÔºàstringsÔºâ"
        if: ${{ github.event.inputs.SCX == 'true' }}
        run: |
          if [[ -f "${{ env.IMAGE }}" ]]; then
            echo "==== [DEBUG] Image‰∏≠Êü•Êâæhmbird_schedÁõ∏ÂÖ≥Á¨¶Âè∑ ===="
            strings "${{ env.IMAGE }}" | grep -i hmbird_sched || echo "Image‰∏≠Êó†hmbird_schedÁõ∏ÂÖ≥Â≠óÁ¨¶‰∏≤"
            strings "${{ env.IMAGE }}" | grep -i slim_sysctl || echo "Image‰∏≠Êó†slim_sysctlÁõ∏ÂÖ≥Â≠óÁ¨¶‰∏≤"
          else
            echo "Êú™ÊâæÂà∞ImageÊñá‰ª∂"
          fi

      - name: Âà∂‰ΩúAnyKernel3ÂÜÖÊ†∏Âà∑Êú∫ÂåÖ
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-no_kpm --depth=1
          git clone https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-kpm --depth=1
          rm -rf AnyKernel3-{kpm,no_kpm}/.git
          rm -f AnyKernel3-{kpm,no_kpm}/push.sh

          if [[ -n "${IMAGE}" && -f "${IMAGE}" ]]; then
            cp "${IMAGE}" AnyKernel3-no_kpm/Image
            echo "IMAGE_PATH=${IMAGE}" >> $GITHUB_ENV
          else
            echo "Êú™ÊâæÂà∞ Image Êñá‰ª∂ÔºåÊûÑÂª∫ÂèØËÉΩÂ§±Ë¥•"
            exit 1
          fi

      - name: ‰∏ä‰º†AnyKernel3 (No_KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}_NoKPM
          path: AnyKernel3-no_kpm/*

      - name: Â∫îÁî®KPMË°•‰∏ÅÂπ∂Âà∂‰ΩúKPMÂà∑Êú∫ÂåÖ
        run: |
          echo "‰ΩøÁî®ÁöÑ Image Ë∑ØÂæÑÊòØ: $IMAGE_PATH"
          cd "$(dirname "$IMAGE_PATH")"
          cp Image $GITHUB_WORKSPACE/AnyKernel3-no_kpm/Image
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3-kpm/Image
          cp Image $GITHUB_WORKSPACE/kernel_workspace/kernel

      - name: ‰∏ä‰º†AnyKernel3 (KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}_KPM
          path: AnyKernel3-kpm/*

      - name: ‰∏ãËΩΩÂπ∂Ëß£ÂéãzramÂÜÖÊ†∏Ê®°Âùó
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          sudo apt install -y unzip
          curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
            grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | xargs wget -N
          unzip "$(ls -t ZRAM-Module-*.zip | head -1)" -d ZRAM-Module

      - name: ‰∏ä‰º†ZRAM-Module
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ZRAM-Module_${{ github.event.inputs.KERNEL_VERSION }}_${{ github.event.inputs.FEIL }}
          path: ZRAM-Module/*
